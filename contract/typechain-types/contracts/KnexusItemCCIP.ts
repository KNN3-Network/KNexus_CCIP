/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace KnexusItemCCIP {
  export type PriceStruct = {
    tokenType: BigNumberish;
    asset: AddressLike;
    tokenIdOrAmount: BigNumberish;
  };

  export type PriceStructOutput = [
    tokenType: bigint,
    asset: string,
    tokenIdOrAmount: bigint
  ] & { tokenType: bigint; asset: string; tokenIdOrAmount: bigint };

  export type TokenStruct = {
    price: KnexusItemCCIP.PriceStruct;
    currentSupply: BigNumberish;
    maxSupply: BigNumberish;
    metadataId: string;
  };

  export type TokenStructOutput = [
    price: KnexusItemCCIP.PriceStructOutput,
    currentSupply: bigint,
    maxSupply: bigint,
    metadataId: string
  ] & {
    price: KnexusItemCCIP.PriceStructOutput;
    currentSupply: bigint;
    maxSupply: bigint;
    metadataId: string;
  };
}

export interface KnexusItemCCIPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authoriseCCIP"
      | "balanceOf"
      | "balanceOfBatch"
      | "burn"
      | "grant"
      | "isApprovedForAll"
      | "lock"
      | "lockable"
      | "mintCCIP"
      | "paused"
      | "platformFee"
      | "revoke"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setFees"
      | "setPaused"
      | "setTokenPrice"
      | "setTokenURI"
      | "setTreasuryAddress"
      | "supportsInterface"
      | "tokenMaxSupply"
      | "tokenOwnerCount"
      | "tokenOwners"
      | "tokenPrice"
      | "tokenSupply"
      | "tokens"
      | "transferTokenOwner"
      | "treasuryAddress"
      | "unlock"
      | "uri"
      | "withdraw"
      | "withdrawErc20"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "Authorised"
      | "Lockable"
      | "Paused"
      | "PlatformFeeSet"
      | "Sold"
      | "TokenOwnerSet"
      | "TokenPriceSet"
      | "TransferBatch"
      | "TransferSingle"
      | "TreasurySet"
      | "URI"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authoriseCCIP",
    values: [AddressLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grant",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lockable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCCIP",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setTokenPrice",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenOwner",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "authoriseCCIP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintCCIP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorisedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    token: KnexusItemCCIP.TokenStruct
  ];
  export type OutputTuple = [
    tokenId: bigint,
    owner: string,
    token: KnexusItemCCIP.TokenStructOutput
  ];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    token: KnexusItemCCIP.TokenStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockableEvent {
  export type InputTuple = [tokenId: BigNumberish, lockable: boolean];
  export type OutputTuple = [tokenId: bigint, lockable: boolean];
  export interface OutputObject {
    tokenId: bigint;
    lockable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeSetEvent {
  export type InputTuple = [
    prevPlatformFee: BigNumberish,
    newPlatformFee: BigNumberish
  ];
  export type OutputTuple = [prevPlatformFee: bigint, newPlatformFee: bigint];
  export interface OutputObject {
    prevPlatformFee: bigint;
    newPlatformFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SoldEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenId: BigNumberish,
    tokenAddress: AddressLike,
    amount: BigNumberish,
    originAmount: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tokenId: bigint,
    tokenAddress: string,
    amount: bigint,
    originAmount: bigint
  ];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
    tokenAddress: string;
    amount: bigint;
    originAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenOwnerSetEvent {
  export type InputTuple = [prevOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [prevOwner: string, newOwner: string];
  export interface OutputObject {
    prevOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPriceSetEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    price: KnexusItemCCIP.PriceStruct
  ];
  export type OutputTuple = [
    tokenId: bigint,
    price: KnexusItemCCIP.PriceStructOutput
  ];
  export interface OutputObject {
    tokenId: bigint;
    price: KnexusItemCCIP.PriceStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasurySetEvent {
  export type InputTuple = [
    prevTreasury: AddressLike,
    newTreasury: AddressLike
  ];
  export type OutputTuple = [prevTreasury: string, newTreasury: string];
  export interface OutputObject {
    prevTreasury: string;
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KnexusItemCCIP extends BaseContract {
  connect(runner?: ContractRunner | null): KnexusItemCCIP;
  waitForDeployment(): Promise<this>;

  interface: KnexusItemCCIPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authoriseCCIP: TypedContractMethod<
    [
      to: AddressLike,
      _tokenURI: string,
      _maxSupply: BigNumberish,
      _metadataId: string
    ],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  burn: TypedContractMethod<
    [owner: AddressLike, id: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  grant: TypedContractMethod<
    [_address: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  lock: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  lockable: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  mintCCIP: TypedContractMethod<
    [
      to: AddressLike,
      _tokenId: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  revoke: TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [_platformFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setTokenPrice: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _priceType: BigNumberish,
      _priceAsset: AddressLike,
      _priceTokenIdOrAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTokenURI: TypedContractMethod<
    [_tokenId: BigNumberish, _tokenURI: string],
    [void],
    "nonpayable"
  >;

  setTreasuryAddress: TypedContractMethod<
    [_treasuryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenMaxSupply: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  tokenOwnerCount: TypedContractMethod<[], [bigint], "view">;

  tokenOwners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tokenPrice: TypedContractMethod<
    [_tokenId: BigNumberish],
    [[bigint, string, bigint]],
    "view"
  >;

  tokenSupply: TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;

  tokens: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [KnexusItemCCIP.PriceStructOutput, bigint, bigint, string] & {
        price: KnexusItemCCIP.PriceStructOutput;
        currentSupply: bigint;
        maxSupply: bigint;
        metadataId: string;
      }
    ],
    "view"
  >;

  transferTokenOwner: TypedContractMethod<
    [_tokenId: BigNumberish, _newOwnerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryAddress: TypedContractMethod<[], [string], "view">;

  unlock: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  uri: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  withdraw: TypedContractMethod<
    [_toAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawErc20: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _toAddress: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authoriseCCIP"
  ): TypedContractMethod<
    [
      to: AddressLike,
      _tokenURI: string,
      _maxSupply: BigNumberish,
      _metadataId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [owner: AddressLike, id: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grant"
  ): TypedContractMethod<
    [_address: AddressLike, _role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lockable"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintCCIP"
  ): TypedContractMethod<
    [
      to: AddressLike,
      _tokenId: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<[_platformFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenPrice"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _priceType: BigNumberish,
      _priceAsset: AddressLike,
      _priceTokenIdOrAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenURI"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _tokenURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasuryAddress"
  ): TypedContractMethod<[_treasuryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenMaxSupply"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOwnerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOwners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenPrice"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [[bigint, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenSupply"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [KnexusItemCCIP.PriceStructOutput, bigint, bigint, string] & {
        price: KnexusItemCCIP.PriceStructOutput;
        currentSupply: bigint;
        maxSupply: bigint;
        metadataId: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferTokenOwner"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _newOwnerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "treasuryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unlock"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_toAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawErc20"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _toAddress: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Authorised"
  ): TypedContractEvent<
    AuthorisedEvent.InputTuple,
    AuthorisedEvent.OutputTuple,
    AuthorisedEvent.OutputObject
  >;
  getEvent(
    key: "Lockable"
  ): TypedContractEvent<
    LockableEvent.InputTuple,
    LockableEvent.OutputTuple,
    LockableEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeSet"
  ): TypedContractEvent<
    PlatformFeeSetEvent.InputTuple,
    PlatformFeeSetEvent.OutputTuple,
    PlatformFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "Sold"
  ): TypedContractEvent<
    SoldEvent.InputTuple,
    SoldEvent.OutputTuple,
    SoldEvent.OutputObject
  >;
  getEvent(
    key: "TokenOwnerSet"
  ): TypedContractEvent<
    TokenOwnerSetEvent.InputTuple,
    TokenOwnerSetEvent.OutputTuple,
    TokenOwnerSetEvent.OutputObject
  >;
  getEvent(
    key: "TokenPriceSet"
  ): TypedContractEvent<
    TokenPriceSetEvent.InputTuple,
    TokenPriceSetEvent.OutputTuple,
    TokenPriceSetEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "TreasurySet"
  ): TypedContractEvent<
    TreasurySetEvent.InputTuple,
    TreasurySetEvent.OutputTuple,
    TreasurySetEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Authorised(uint256,address,tuple)": TypedContractEvent<
      AuthorisedEvent.InputTuple,
      AuthorisedEvent.OutputTuple,
      AuthorisedEvent.OutputObject
    >;
    Authorised: TypedContractEvent<
      AuthorisedEvent.InputTuple,
      AuthorisedEvent.OutputTuple,
      AuthorisedEvent.OutputObject
    >;

    "Lockable(uint256,bool)": TypedContractEvent<
      LockableEvent.InputTuple,
      LockableEvent.OutputTuple,
      LockableEvent.OutputObject
    >;
    Lockable: TypedContractEvent<
      LockableEvent.InputTuple,
      LockableEvent.OutputTuple,
      LockableEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlatformFeeSet(uint256,uint256)": TypedContractEvent<
      PlatformFeeSetEvent.InputTuple,
      PlatformFeeSetEvent.OutputTuple,
      PlatformFeeSetEvent.OutputObject
    >;
    PlatformFeeSet: TypedContractEvent<
      PlatformFeeSetEvent.InputTuple,
      PlatformFeeSetEvent.OutputTuple,
      PlatformFeeSetEvent.OutputObject
    >;

    "Sold(address,uint256,address,uint256,uint256)": TypedContractEvent<
      SoldEvent.InputTuple,
      SoldEvent.OutputTuple,
      SoldEvent.OutputObject
    >;
    Sold: TypedContractEvent<
      SoldEvent.InputTuple,
      SoldEvent.OutputTuple,
      SoldEvent.OutputObject
    >;

    "TokenOwnerSet(address,address)": TypedContractEvent<
      TokenOwnerSetEvent.InputTuple,
      TokenOwnerSetEvent.OutputTuple,
      TokenOwnerSetEvent.OutputObject
    >;
    TokenOwnerSet: TypedContractEvent<
      TokenOwnerSetEvent.InputTuple,
      TokenOwnerSetEvent.OutputTuple,
      TokenOwnerSetEvent.OutputObject
    >;

    "TokenPriceSet(uint256,tuple)": TypedContractEvent<
      TokenPriceSetEvent.InputTuple,
      TokenPriceSetEvent.OutputTuple,
      TokenPriceSetEvent.OutputObject
    >;
    TokenPriceSet: TypedContractEvent<
      TokenPriceSetEvent.InputTuple,
      TokenPriceSetEvent.OutputTuple,
      TokenPriceSetEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "TreasurySet(address,address)": TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;
    TreasurySet: TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
